# GitWit configuration file
# This file defines the rules and options for creating semantic commits.

---

types:
  # Select the type of change you're committing (e.g., feat, fix)
  description: "Select the type of change you're committing"
  values:
    feat: "A new feature"
    fix: "A bug fix"
    docs: "Documentation only changes"
    style: "Changes that do not affect the meaning of the code (e.g. formatting)"
    refactor: "Code changes that neither fix a bug nor add a feature"
    test: "Adding or correcting tests"
    chore: "Other changes that don't modify src or test files"

scope:
  # Specify the scope of the change (e.g., component or module).
  # When using 'list', only predefined values are allowed.
  description: "Specify the scope of the change (e.g. component or module)"
  required: false
  type: list # You can use 'list' or 'text'
  values:
    - core
    - api
    - cli
    - ui
    - infra
    - tests
    - docs
    - config

shortDescription:
  # Short summary of the change (imperative, present tense)
  description: "Provide a short, descriptive summary of the change"
  required: true
  minLength: 5
  maxLength: 70

longDescription:
  # Additional context or rationale for the change (e.g., reasons for the implementation)
  enabled: true
  description: "Additional details about the change, why it was made, and any context"
  required: false
  minLength: 20
  maxLength: 100

breakingChanges:
  # Describe any breaking changes, including what changed and how to migrate
  enabled: true
  description: "List any breaking changes and their impact"

changelog:
  # Optional title used as a heading for the generated changelog
  title: "Changelog"

  # Maps commit types to titles for organizing the changelog
  types:
    feat: "New features"
    fix: "Bug fixes"
    refactor: "Code refactoring"

  # Whether to include other types not explicitly listed in the 'types' section
  showOtherTypes: true

  # Whether breaking changes should be displayed in a separate section
  showBreakingChanges: true

  # Commit types to be excluded from changelog generation
  ignored:
    - chore

  format:
    # Supported substitutions:
    # - {type}: commit type.
    # - {scope}: commit scope.
    # - {description}: short description.
    # - {hash}: full commit hash.
    # - {shortHash}: first 7 characters of the hash.
    # - {breakingChanges}: inserts an indication of whether there were breaking changes.
    # - {author}: commit author.
    # - {date}: commit date (in yyyy-MM-dd HH:mm:ss format).

    # Template used for commits that are in a changelog section (defined in 'types')
    sectionTemplate: "{scope}: {description} ({shortHash})"

    # Template used for breaking changes (regardless of type)
    breakingChangesTemplate: "{type} ({scope})!: {description} ({shortHash})"

    # Template used for types that are not listed in 'types'
    otherTypesTemplate: "{type} ({scope}): {description} ({shortHash})"

    # Generic fallback if the others do not apply
    defaultTemplate: "{type}: {description}"

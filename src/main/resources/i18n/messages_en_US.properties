commit.validation.invalid_type=Invalid commit type.
commit.validation.not_allowed_type=The specified commit type is not allowed, check the configuration file.
commit.validation.missing_scope=The commit scope must be provided.
commit.validation.missing_short_description=The short description must be provided.
commit.validation.short_description_too_short=The short description must not be shorter than {0} characters.
commit.validation.short_description_too_long=The short description must not be longer than {0} characters.
commit.validation.missing_long_description=The long description must be provided.
commit.validation.long_description_too_short=The long description must not be shorter than {0} characters.
commit.validation.long_description_too_long=The long description must not be longer than {0} characters.

commit.validation.violations=following violations were found

commit.prompt.type=Commit type
commit.prompt.scope=Scope
commit.prompt.short_description=Short description
commit.prompt.long_description=Long description
commit.prompt.optional=optional
commit.prompt.ignore=Ignore
commit.prompt.breaking_changes=Breaking changes

commit.config.loaded=Loaded configuration: {0}

commit.wizard.message_written=Wrote commit message to {0}
commit.wizard.message_success=Commit message generated successfully!

commit.execution.success=Commit completed successfully: {0}
commit.execution.failed=Commit failed. Use --debug for more details.

install.conflict.hook_global=The options --hook and --global cannot be used together.

install.hook.start=Installing the GitWit hook in the current repository...
install.hook.success=Hook installed successfully!

install.alias.global=Installing GitWit as a global Git alias...
install.alias.local=Installing GitWit as a local Git alias for the current repository...
install.success=GitWit installed successfully! To use GitWit, run the command git {0}.

uninstall.conflict.hook_global=The options --hook and --global cannot be used together.

uninstall.hook.start=Uninstalling the GitWit hook in the current repository...
uninstall.hook.success=Hook uninstalled successfully!

uninstall.alias.global=Uninstalling the GitWit globally...
uninstall.alias.local=Uninstalling the GitWit in the current repository...
uninstall.success=GitWit uninstalled successfully!

git.service.hooks.created=Created custom hooks dir: {0}
git.service.hooks.moved=Moved hook {0} to {1}
git.service.hooks.already_exists=GitWit hook is already installed (use --force to overwrite).
git.service.hooks.script_written=Hook script written to {0}
git.service.hooks.path_set=Hooks path set to {0}
git.service.hooks.editor_set=Editor set to {0}
git.service.hooks.removed=GitWit hook removed: {0}
git.service.hooks.none_to_remove=No GitWit hook found to remove.
git.service.hooks.config_cleared=hooksPath and editor configuration removed from Git config.
git.service.hooks.not_configured=hooksPath is not pointing to GitWit directory. No changes made.

git.service.alias.configured=GitWit alias configured {0}.
git.service.alias.already_configured=GitWit already configured {0}.
git.service.alias.removed=GitWit alias removed {0}.
git.service.alias.not_configured=GitWit not configured {0}.

git.service.commit.adding_files=Adding files to commit.

error.not_specified=Error not specified.
error.general={0}
error.commit_wizard_creation_failed=Failed to create commit wizard prompt.
error.commit_msg_write_failed=Failed to write commit message file.
error.terminal_creation_error=An error occurred while creating the execution terminal.
error.terminal_finish_error=An error occurred while closing the execution terminal.
error.configuration_cannot_be_null=Configuration cannot be null.

error.commit_types_required=Commit types list must be provided.
error.scope_type_invalid=Invalid configured scope type. Expected 'list' or 'text'. Provided value: {0}.
error.scope_values_required=Scope values must be provided.
error.changelog_types_required=A valid type mapping for the changelog must be provided.
error.changelog_failure_write=Failed to write the changelog file.

error.clipboard_copy_failure=Failed to copy content to clipboard.

error.not_a_git_repository=The current directory does not contain a Git repository.
error.init_repository_failed=Failed to initialize the repository at the current location.
error.default_hooks_move_failed=Failed to move default Git hooks.
error.hook_move_failed=Failed to move hook: {0}
error.prepare_hook_write_failed=Failed to write 'prepare-commit-msg' hook file.
error.core_hook_path_failed=Failed to configure 'core.hooksPath'.

error.git.no_head=Repository has no commits (HEAD is missing).
error.git.unmerged_paths=There are unresolved conflicts in the repository.
error.git.wrong_repository_state=The repository is in an invalid state for commit.
error.git.service_unavailable=The Git service is unavailable.
error.git.concurrent_ref_update=Failed to update reference due to concurrency.
error.git.aborted_by_hook=Commit was aborted by a Git hook.
error.git.no_commit_message=The commit message is missing.
error.git.empty_commit=No changes detected to commit.
error.git.git_api_exception=Internal Git API error.
error.git.git_config_invalid=The Git configuration is invalid.
error.git.unsupported_object_type=Unsupported Git object type: {0}.

error.app_directory_error=Failed to retrieve application directory. Cause: {0}
error.config_file_not_found=Could not find GitWit configuration file. Check if it exists or use --config-example to create an example file.
error.config_file_invalid=The GitWit configuration file is invalid.
error.config_example_copy_failed=Failed to copy GitWit configuration example file.
error.config_already_exists=GitWit configuration file already exists.

success.config_example_generated=GitWit configuration example file created in {0}.

lint.start_head=Starting validation for the last commit (HEAD).
lint.start_from=Starting validation from commit {0}.
lint.start_multiple=Starting validation for commits from {0} to {1}.

lint.total_messages=Total commits to be checked: {0}.
lint.success=Commit lint check successful!

warn.changelog_no_commits=No commits found for the changelog, check the parameters provided.

changelog.other_changes=Other changes
changelog.start=Starting changelog generation.
changelog.generated=Changelog generated.
changelog.copied=Changelog successfully copied to clipboard.
changelog.written=Changelog file successfully generated in {0}.

warn.clipboard.unsupported_os=Operating system not supported for clipboard copy.
warn.clipboard.no_utility=No clipboard utility available (xclip, xsel, wl-copy).

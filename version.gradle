class ApplicationVersion {
    Integer major
    Integer minor
    Integer patch
     Integer releaseCandidate

    ApplicationVersion(Integer major, Integer minor, Integer patch, Integer releaseCandidate) {
        this.major = major
        this.minor = minor
        this.patch = patch
        this.releaseCandidate = releaseCandidate
    }

    private String getRelease() {
        return this.releaseCandidate <= 0 ? '' : '-RC' + this.releaseCandidate
    }

    String getVersion() {
        return "$major.$minor.$patch" + this.getRelease()
    }
}

ext.loadVersion = { ->
    def versionPropertiesFile = file('version.properties')

    if (!versionPropertiesFile.exists()) {
        throw new Exception('No version.properties file found')
    }

    Properties versionProperties = new Properties()

    versionPropertiesFile.withInputStream { stream ->
        versionProperties.load(stream)
    }

    return new ApplicationVersion(versionProperties.major.toInteger(),
        versionProperties.minor.toInteger(),
        versionProperties.patch.toInteger(),
        versionProperties.get('release-candidate').toInteger())

}

tasks.register('majorVersionUpdate') {
    group = 'versioning'
    description = 'Bump to next major version'
    doFirst {
        def versionFile = file('version.properties')
        ant.propertyfile(file: versionFile) {
            entry(key: 'major', type: 'int', operation: '+', value: 1)
            entry(key: 'minor', type: 'int', operation: '=', value: 0)
            entry(key: 'patch', type: 'int', operation: '=', value: 0)
        }
    }
}

tasks.register('minorVersionUpdate') {
    group = 'versioning'
    description = 'Bump to next minor version'
    doFirst {
        def versionFile = file('version.properties')
        ant.propertyfile(file: versionFile) {
            entry(key: 'minor', type: 'int', operation: '+', value: 1)
            entry(key: 'patch', type: 'int', operation: '=', value: 0)
        }
    }
}

tasks.register('patchVersionUpdate') {
    group = 'versioning'
    description = 'Bump to next patch version'
    doFirst {
        def versionFile = file('version.properties')
        ant.propertyfile(file: versionFile) {
            entry(key: 'patch', type: 'int', operation: '+', value: 1)
        }
        project.version = loadVersion().getVersion()
    }
}

tasks.register('releaseVersion') {
    group = 'versioning'
    description = 'Make the version a release'
    doFirst {
        def versionFile = file('version.properties')
        ant.propertyfile(file: versionFile) {
            entry(key: 'release', type: 'string', operation: '=', value: 'true')
        }
    }
}

tasks.register('preReleaseVersion') {
    group = 'versioning'
    description = 'Make the version a pre release'
    doFirst {
        def versionFile = file('version.properties')
        ant.propertyfile(file: versionFile) {
            entry(key: 'release', type: 'string', operation: '=', value: 'false')
        }
    }
}
